// Generated by CoffeeScript 1.10.0
(function() {
  var Animal, Dog, aString, addmath, age, arr1, arr2, arraystr, coat, combine, csoutput, factorial, factorial2, getRandom, glove, grov, hat, helloFunc, i, j, k, large, largestr, len, name, people, randarray, rank, results, results1, small, smallstr, spark, sumofnums, x,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  name = "Jitendra";

  csoutput = document.getElementById("csoutput");

  csoutput.innerHTML = "Hello " + name;

  aString = "I'm a coffeescript person";

  if (typeof aString === 'string') {
    csoutput.insertAdjacentHTML("beforeend", " <br>" + aString + " is in coffee.js");
  }

  large = Number.MAX_VALUE;

  small = Number.MIN_VALUE;

  largestr = "The large no is " + large;

  smallstr = "The small no is " + small;

  csoutput.insertAdjacentHTML("beforeend", "<br>" + largestr + "<br>");

  csoutput.insertAdjacentHTML("beforeend", "" + smallstr + "<br>");

  addmath = Math.E;

  csoutput.insertAdjacentHTML("beforeend", "<br>" + addmath);

  arraystr = "This is the demo for you".split(" ");

  for (i = 0, len = arraystr.length; i < len; i++) {
    x = arraystr[i];
    csoutput.insertAdjacentHTML("beforeend", "<br>" + x);
  }

  age = 10;

  switch (age) {
    case 5:
      csoutput.insertAdjacentHTML("beforeend", "<br>In jquery");
      break;
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      csoutput.insertAdjacentHTML("beforeend", "<br>In javascript");
      break;
    default:
      csoutput.insertAdjacentHTML("beforeend", "<br>In typescript");
  }

  if (age != null) {
    csoutput.insertAdjacentHTML("beforeend", "<br>Age is " + age + " year old");
  } else {
    csoutput.insertAdjacentHTML("beforeend", "<br>age is empty");
  }

  hat = "its hat";

  coat = "its coat";

  glove = null;

  if ((hat != null) && (coat != null)) {
    csoutput.insertAdjacentHTML("beforeend", "<br>The values are:" + hat + " , " + coat + " , " + (glove != null ? glove : 'its glove'));
  }

  randarray = ["word", false, 1234, 12.34];

  csoutput.insertAdjacentHTML("beforeend", "<br>array value is " + randarray[2]);

  csoutput.insertAdjacentHTML("beforeend", "<br>another value is " + randarray.slice(1, 4));

  arr1 = (function() {
    results = [];
    for (j = 1; j <= 50; j++){ results.push(j); }
    return results;
  }).apply(this);

  arr2 = (function() {
    results1 = [];
    for (k = 50; k >= 1; k--){ results1.push(k); }
    return results1;
  }).apply(this);

  combine = arr1.concat(arr2);

  arr1.push.apply(arr1, arr2);

  csoutput.insertAdjacentHTML("beforeend", "<br>The overalll is " + arr1);

  people = [
    {
      name: "Devendra",
      age: 23
    }, {
      name: "Swapnil",
      age: 22
    }
  ];

  csoutput.insertAdjacentHTML("beforeend", "<br>the people is " + people[0].name);

  helloFunc = function(name) {
    return "hello " + name;
  };

  csoutput.insertAdjacentHTML("beforeend", "<br>function value is " + (helloFunc('devendra-swapnil')));

  getRandom = function() {
    return Math.floor(Math.random() * 1000) + 1;
  };

  csoutput.insertAdjacentHTML("beforeend", "<br>Random val is " + (getRandom()));

  sumofnums = function() {
    var l, len1, sum, vars;
    vars = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    sum = 0;
    for (l = 0, len1 = vars.length; l < len1; l++) {
      x = vars[l];
      sum += x;
    }
    return sum;
  };

  csoutput.insertAdjacentHTML("beforeend", "<br>The sum is " + (sumofnums(2, 2, 23, 4, 5)));

  rank = function(star) {
    if (star == null) {
      star = 1;
    }
    if (star <= 2) {
      return "nice";
    } else {
      return "bad";
    }
  };

  csoutput.insertAdjacentHTML("beforeend", "<br>rank is " + (rank()));

  csoutput.insertAdjacentHTML("beforeend", "<br>rank its " + (rank(3)));

  factorial = function(x) {
    if (x < 0) {
      return 0;
    }
    if (x === 0 || x === 1) {
      return 1;
    }
    return x * factorial(x - 1);
  };

  csoutput.insertAdjacentHTML("beforeend", "<br>factorial is " + (factorial(4)));

  factorial2 = function(x) {
    if (x < 0) {
      return 0;
    }
    if (x === 0 || x === 1) {
      return 1;
    }
    return x * factorial(x - 1);
  };

  csoutput.insertAdjacentHTML("beforeend", "<br>another factorial is " + (factorial2(4)));

  Animal = (function() {
    Animal.prototype.name = "no name";

    Animal.prototype.height = 0;

    Animal.prototype.weight = 0;

    Animal.prototype.sound = "no sound";

    Animal.numofAnimals = 0;

    Animal.getNumofAnimals = function() {
      return Animal.numofAnimals;
    };

    function Animal(name, height1, weight1) {
      if (name == null) {
        name = "no name";
      }
      this.height = height1 != null ? height1 : 0;
      this.weight = weight1 != null ? weight1 : 0;
      this.name = name;
      Animal.numofAnimals++;
    }

    Animal.prototype.makeSound = function() {
      return "says " + this.sound;
    };

    Animal.prototype.getInfo = function() {
      return this.name + " is weight: " + this.weight + " and height: " + this.height + " and sound " + this.sound;
    };

    return Animal;

  })();

  grov = new Animal();

  grov.name = "Tiger";

  grov.height = 50;

  grov.weight = 200;

  grov.sound = "hrrrrrrrddddddd";

  csoutput.insertAdjacentHTML("beforeend", "<br>class detail is " + (grov.getInfo()));

  Animal.prototype.isItBig = function() {
    if (this.height >= 50) {
      return csoutput.insertAdjacentHTML("beforeend", "<br>yes");
    } else {
      return "nop";
    }
  };

  csoutput.insertAdjacentHTML("beforeend", "<br>The big is " + (grov.isItBig()));

  Dog = (function(superClass) {
    extend(Dog, superClass);

    Dog.prototype.sound2 = "no sound";

    function Dog(name, height, weight) {
      if (name == null) {
        name = "no name";
      }
      if (height == null) {
        height = 0;
      }
      if (weight == null) {
        weight = 0;
      }
      Dog.__super__.constructor.call(this, name, height, weight);
    }

    Dog.prototype.makeSound = function() {
      return Dog.__super__.makeSound.apply(this, arguments) + (" and " + this.sound2);
    };

    return Dog;

  })(Animal);

  spark = new Dog("Spark");

  spark.sound = "hrrrrrrrrrrrrrrrrrrr";

  spark.sound2 = "htttttttttttt";

  csoutput.insertAdjacentHTML("beforeend", "<br>The inherited is " + (spark.getInfo()));

}).call(this);
